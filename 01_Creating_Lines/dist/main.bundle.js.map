{"version":3,"file":"main.bundle.js","mappings":"mBAQA,MAAMA,EAAyB,CAAC,CAAEC,GAAI,IAAMC,EAAG,KAAQ,CAAED,EAAG,IAAMC,GAAI,KAAQ,CAAED,EAAG,IAAMC,EAAG,KAAQ,CAAED,GAAI,IAAMC,GAAI,MAC9GC,EAAkB,GAElBC,EAAkB,CAAOD,EAAkBH,KAAkB,O,OAAD,E,OAAA,E,EAAA,Y,MAC9D,MAAMK,ECXSC,UAAUC,IAErB,+CAEA,yDDSJ,IAAKD,UAAUC,IAIX,YAHaC,SAASC,cAAc,cAC7BC,WAAaL,GAKxB,MACMM,EADSH,SAASI,eAAe,iBAChBC,WAAW,UAC5BC,QAA6B,QAAb,EAAAR,UAAUC,WAAG,eAAEQ,iBAC/BC,QAAeF,aAAO,EAAPA,EAASG,gBACxBC,EAAS,aAEfP,EAAQQ,UAAU,CACdH,OAAQA,EACRE,OAAQA,EACRE,UAAW,WAGf,MAAMC,EE5Ba,CAAClB,IACpB,IAAImB,EAAY,GAsBhB,OArBAnB,EAAOoB,SAASC,IACbF,GAAa,aAAaE,EAAMvB,MAAMuB,EAAMtB,OAAO,IAoB/C,CAAEuB,OAjBM,yJAGsBtB,EAAOuB,0CAC9BJ,gGAaGK,SAPA,yIAOU,EFKXC,CAAQzB,GAClB0B,EAAWb,EAAOc,qBAAqB,CACzCC,OAAO,OACPN,OAAQ,CACJO,OAAQhB,EAAOiB,mBAAmB,CAC9BC,KAAMb,EAAQI,SAElBU,WAAY,QAEhBR,SAAU,CACNK,OAAQhB,EAAOiB,mBAAmB,CAC9BC,KAAMb,EAAQM,WAElBQ,WAAY,OACZC,QAAS,CAAC,CACNlB,OAAQA,KAGhBmB,UAAU,CACNC,SAAU,YACVC,sBAAkBC,KAIpBC,EAAc9B,EAAQ+B,oBAAoBC,aAC1CC,EAAiB5B,EAAO6B,uBACxBC,EAAaF,EAAeG,gBAAgB,CAC9CC,iBAAkB,CAAC,CACfC,KAAMR,EACNS,WAAY,CAAEC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EAAKC,EAAG,GACzCC,OAAQ,QACRC,QAAS,YAIjBV,EAAWW,YAAY5B,GACvBiB,EAAWY,KAAKvD,EAAOuB,QACvBoB,EAAWa,MAEX3C,EAAO4C,MAAMC,OAAO,CAACjB,EAAekB,UACxC,E,YA9DkE,K,6QA8DjE,EAED1D,IAEA,MAAM2D,EAASvD,SAASC,cAAc,kBACtCsD,EAAOC,iBAAiB,SAAUC,IAC9B,MAAMC,GAAeD,EAAEE,QAAyB,GAAfJ,EAAOK,QAA+B,GAAfL,EAAOK,OACzDC,IAAgBJ,EAAEK,QAA0B,GAAhBP,EAAOQ,SAAiC,GAAhBR,EAAOQ,QAEjEpE,EAAOqE,KAAK,CAAEvE,EAAGiE,EAAahE,EAAGmE,IACjCjE,EAAgBD,EAAO,G","sources":["webpack://first/./src/main.ts","webpack://first/./src/helper.ts","webpack://first/./src/shaders.ts"],"sourcesContent":["import { checkWebGPU } from './helper';\r\nimport { Shaders } from './shaders';\r\n\r\ninterface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nconst defaultPoints: Point[] = [{ x: -0.75, y: 0.75 }, { x: 0.75, y: -0.75 }, { x: 0.75, y: 0.75 }, { x: -0.75, y: -0.75 }];\r\nconst points: Point[] = [];\r\n\r\nconst CreatePrimitive = async (points: Point[] = defaultPoints) => {\r\n    const message = checkWebGPU();\r\n\r\n    if (!navigator.gpu) {\r\n        let header = document.querySelector('#gpu-check') as HTMLDivElement;\r\n        header.innerHTML += message;\r\n\r\n        return;\r\n    }\r\n\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    const context = canvas.getContext('webgpu') as GPUCanvasContext;\r\n    const adapter = await navigator.gpu?.requestAdapter() as GPUAdapter;\r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const format = 'bgra8unorm';\r\n\r\n    context.configure({\r\n        device: device,\r\n        format: format,\r\n        alphaMode: 'opaque'\r\n    });\r\n\r\n    const shaders = Shaders(points);\r\n    const pipeline = device.createRenderPipeline({\r\n        layout:'auto',\r\n        vertex: {\r\n            module: device.createShaderModule({                    \r\n                code: shaders.vertex\r\n            }),\r\n            entryPoint: 'main'\r\n        },\r\n        fragment: {\r\n            module: device.createShaderModule({                    \r\n                code: shaders.fragment\r\n            }),\r\n            entryPoint: 'main',\r\n            targets: [{\r\n                format: format as GPUTextureFormat\r\n            }]\r\n        },\r\n        primitive:{\r\n            topology: 'line-list' as GPUPrimitiveTopology,\r\n            stripIndexFormat: undefined\r\n        }\r\n    });\r\n\r\n    const textureView = context.getCurrentTexture().createView();\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const renderPass = commandEncoder.beginRenderPass({\r\n        colorAttachments: [{\r\n            view: textureView as GPUTextureView,\r\n            clearValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 }, //background color\r\n            loadOp: 'clear',\r\n            storeOp: 'store'\r\n        }]\r\n    });\r\n\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.draw(points.length);\r\n    renderPass.end();\r\n\r\n    device.queue.submit([commandEncoder.finish()]);\r\n};\r\n\r\nCreatePrimitive();\r\n\r\nconst canvas = document.querySelector('#canvas-webgpu') as HTMLCanvasElement;\r\ncanvas.addEventListener('click', (e) => {\r\n    const xCoordinate = (e.offsetX - canvas.width * 0.5) / (canvas.width * 0.5);\r\n    const yCoordinate = (-e.offsetY + canvas.height * 0.5) / (canvas.height * 0.5);\r\n\r\n    points.push({ x: xCoordinate, y: yCoordinate });\r\n    CreatePrimitive(points);\r\n});","export const checkWebGPU = () => {\r\n    let result = !!navigator.gpu\r\n        ? \r\n        'Great, your current browser supports WebGPU.'\r\n        :\r\n        'It\\'s sad, your current browser doesn\\'t support WebGPU.'\r\n\r\n\r\n    return result;\r\n};","interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport const Shaders = (points: Point[]) => {\r\n    let pointsStr = ''\r\n    points.forEach((point) => {\r\n       pointsStr += `vec2<f32>(${point.x}, ${point.y}),\\n`; \r\n    });\r\n\r\n    const vertex = `\r\n        @vertex\r\n        fn main(@builtin(vertex_index) VertexIndex: u32) -> @builtin(position) vec4<f32> {\r\n            var pos = array<vec2<f32>, ${points.length}>(             \r\n                ${pointsStr}\r\n            );\r\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\r\n        }\r\n    `;\r\n\r\n    const fragment = `\r\n        @fragment\r\n        fn main() -> @location(0) vec4<f32> {\r\n            return vec4<f32>(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n    `;\r\n\r\n    return { vertex, fragment };\r\n}"],"names":["defaultPoints","x","y","points","CreatePrimitive","message","navigator","gpu","document","querySelector","innerHTML","context","getElementById","getContext","adapter","requestAdapter","device","requestDevice","format","configure","alphaMode","shaders","pointsStr","forEach","point","vertex","length","fragment","Shaders","pipeline","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","targets","primitive","topology","stripIndexFormat","undefined","textureView","getCurrentTexture","createView","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","draw","end","queue","submit","finish","canvas","addEventListener","e","xCoordinate","offsetX","width","yCoordinate","offsetY","height","push"],"sourceRoot":""}
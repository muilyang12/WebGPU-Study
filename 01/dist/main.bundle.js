(()=>{"use strict";const e=[{x:-.75,y:.75},{x:.75,y:-.75},{x:.75,y:.75},{x:-.75,y:-.75}],t=[],n=(t=e)=>{return n=void 0,r=void 0,i=function*(){var e;const n=navigator.gpu?"Great, your current browser supports WebGPU.":"It's sad, your current browser doesn't support WebGPU.";if(!navigator.gpu)return void(document.querySelector("#gpu-check").innerHTML+=n);const r=document.getElementById("canvas-webgpu").getContext("webgpu"),o=yield null===(e=navigator.gpu)||void 0===e?void 0:e.requestAdapter(),i=yield null==o?void 0:o.requestDevice(),a="bgra8unorm";r.configure({device:i,format:a,alphaMode:"opaque"});const u=(e=>{let t="";return e.forEach((e=>{t+=`vec2<f32>(${e.x}, ${e.y}),\n`})),{vertex:`\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex: u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, ${e.length}>(             \n                ${t}\n            );\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n        }\n    `,fragment:"\n        @fragment\n        fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n        }\n    "}})(t),c=i.createRenderPipeline({layout:"auto",vertex:{module:i.createShaderModule({code:u.vertex}),entryPoint:"main"},fragment:{module:i.createShaderModule({code:u.fragment}),entryPoint:"main",targets:[{format:a}]},primitive:{topology:"line-list",stripIndexFormat:void 0}}),d=r.getCurrentTexture().createView(),s=i.createCommandEncoder(),l=s.beginRenderPass({colorAttachments:[{view:d,clearValue:{r:1,g:1,b:1,a:1},loadOp:"clear",storeOp:"store"}]});l.setPipeline(c),l.draw(t.length),l.end(),i.queue.submit([s.finish()])},new((o=void 0)||(o=Promise))((function(e,t){function a(e){try{c(i.next(e))}catch(e){t(e)}}function u(e){try{c(i.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o((function(e){e(n)}))).then(a,u)}c((i=i.apply(n,r||[])).next())}));var n,r,o,i};n();const r=document.querySelector("#canvas-webgpu");r.addEventListener("click",(e=>{const o=(e.offsetX-.5*r.width)/(.5*r.width),i=(-e.offsetY+.5*r.height)/(.5*r.height);t.push({x:o,y:i}),n(t)}))})();
//# sourceMappingURL=main.bundle.js.map